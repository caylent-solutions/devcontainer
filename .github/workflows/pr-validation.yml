name: PR Validation

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  validate:
    name: Validate PR
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Simulate merge
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          # Fetch the base branch (main)
          git fetch origin ${{ github.base_ref }}
          # Checkout the base branch
          git checkout -b pr-validation origin/${{ github.base_ref }}
          # Merge the PR branch without committing
          git merge --no-commit --no-ff ${{ github.event.pull_request.head.sha }}

      - name: Install system dependencies for Python build
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libssl-dev zlib1g-dev
          sudo apt-get install -y libbz2-dev libreadline-dev libsqlite3-dev curl
          sudo apt-get install -y libncursesw5-dev xz-utils tk-dev libxml2-dev
          sudo apt-get install -y libxmlsec1-dev libffi-dev liblzma-dev bc

      - name: Install ASDF
        uses: asdf-vm/actions/setup@v3

      - name: Install ASDF plugins and tools
        run: |
          cd $GITHUB_WORKSPACE
          cat .tool-versions | cut -d' ' -f1 | xargs -I{} asdf plugin add {} || true
          asdf install
          asdf reshim

      - name: Install CLI
        run: |
          cd $GITHUB_WORKSPACE/caylent-devcontainer-cli
          make install

      - name: Lint
        run: |
          cd $GITHUB_WORKSPACE/caylent-devcontainer-cli
          make lint

      - name: Build
        run: |
          cd $GITHUB_WORKSPACE/caylent-devcontainer-cli
          make build

      - name: Run unit tests with coverage threshold
        run: |
          cd $GITHUB_WORKSPACE/caylent-devcontainer-cli
          make unit-test
          # Generate JSON coverage report first
          coverage json
          coverage_percent=$(python -c "import json; f=open('coverage.json'); print(json.load(f)['totals']['percent_covered'])")
          echo "Coverage: $coverage_percent%"
          if (( $(echo "$coverage_percent < 85" | bc -l) )); then
            echo "Error: Code coverage is below 85% threshold ($coverage_percent%)"
            exit 1
          fi

      - name: Run functional tests
        run: |
          cd $GITHUB_WORKSPACE/caylent-devcontainer-cli
          make functional-test

      - name: Generate coverage report
        run: |
          cd $GITHUB_WORKSPACE/caylent-devcontainer-cli
          make coverage
          make coverage-json
      - name: Print coverage summary
        run: |
          cd $GITHUB_WORKSPACE/caylent-devcontainer-cli
          make coverage-text
          
      - name: Find code owners
        id: codeowners
        if: success()
        run: |
          # Try to find code owners for the changed files
          CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }} ${{ github.event.pull_request.head.sha }})
          CODEOWNERS=""
          if [ -f ".github/CODEOWNERS" ]; then
            for FILE in $CHANGED_FILES; do
              OWNERS=$(grep -E "(^|\\s)${FILE}(\\s|$)" .github/CODEOWNERS | awk '{for(i=2;i<=NF;i++) print $i}' | sort -u)
              if [ -n "$OWNERS" ]; then
                CODEOWNERS="$CODEOWNERS $OWNERS"
              fi
            done
            CODEOWNERS=$(echo "$CODEOWNERS" | tr ' ' '\n' | sort -u | tr '\n' ' ' | xargs)
          fi
          echo "owners=$CODEOWNERS" >> $GITHUB_OUTPUT
          
      - name: Send PR review request to Slack
        if: success()
        uses: slackapi/slack-github-action@v1.25.0
        with:
          payload: |
            {
              "text": "üîç PR Ready for Review",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "üîç PR Ready for Review"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*PR #${{ github.event.pull_request.number }}*: ${{ github.event.pull_request.title }}\n\nAll validation checks have passed! This PR is ready for review.\n\n<${{ github.event.pull_request.html_url }}|View Pull Request>"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Author:* ${{ github.event.pull_request.user.login }}\n*Code Owners:* ${{ steps.codeowners.outputs.owners || 'No code owners found' }}"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
