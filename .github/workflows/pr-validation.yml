name: PR Validation

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  validate:
    name: Validate PR
    if: ${{ github.actor != 'caylent-platform-bot[bot]' }}
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Simulate merge
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git fetch origin ${{ github.base_ref }}
          git checkout -b pr-validation origin/${{ github.base_ref }}
          git merge --no-commit --no-ff ${{ github.event.pull_request.head.sha }}

      - name: Cache system dependencies
        id: cache-system-deps
        uses: actions/cache@v4
        with:
          path: /tmp/apt-cache
          key: system-deps-${{ runner.os }}-ubuntu-2404-v3

      - name: Install system dependencies for Python build
        run: |
          # Configure apt to use our cache directory
          sudo mkdir -p /tmp/apt-cache
          echo 'Dir::Cache::Archives "/tmp/apt-cache";' | sudo tee /etc/apt/apt.conf.d/99cache

          sudo apt-get update
          sudo apt-get install -y build-essential libssl-dev zlib1g-dev
            libbz2-dev libreadline-dev libsqlite3-dev curl
            libncursesw5-dev xz-utils tk-dev libxml2-dev
            libxmlsec1-dev libffi-dev liblzma-dev bc

      - name: Fix cache permissions
        if: always()
        run: |
          # Fix permissions on cache directories to allow GitHub Actions to access them
          sudo chmod -R 755 /tmp/apt-cache 2>/dev/null || true
          sudo chown -R $USER:$USER /tmp/apt-cache 2>/dev/null || true

      - name: Cache ASDF installation
        uses: actions/cache@v4
        with:
          path: ~/.asdf
          key: ${{ runner.os }}-asdf-v0.15.0-${{ hashFiles('.tool-versions') }}
          restore-keys: |
            ${{ runner.os }}-asdf-v0.15.0-

      - name: Install ASDF
        run: |
          if [ ! -d ~/.asdf ]; then
            git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.15.0
          fi
          echo "$HOME/.asdf/bin" >> $GITHUB_PATH
          echo "$HOME/.asdf/shims" >> $GITHUB_PATH
          source $HOME/.asdf/asdf.sh

      - name: Install ASDF plugins and tools
        run: |
          cd $GITHUB_WORKSPACE
          source $HOME/.asdf/asdf.sh
          cat .tool-versions | cut -d' ' -f1 | xargs -I{} asdf plugin add {} || true
          asdf install
          asdf reshim

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.local/lib/python*/site-packages
          key: ${{ runner.os }}-pip-${{ hashFiles('caylent-devcontainer-cli/requirements.txt', 'caylent-devcontainer-cli/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install CLI
        run: |
          cd $GITHUB_WORKSPACE/caylent-devcontainer-cli
          source $HOME/.asdf/asdf.sh
          pip install --upgrade pip
          make install
          asdf reshim

      - name: Lint
        run: |
          cd $GITHUB_WORKSPACE/caylent-devcontainer-cli
          source $HOME/.asdf/asdf.sh
          make lint

      - name: Build
        run: |
          cd $GITHUB_WORKSPACE/caylent-devcontainer-cli
          source $HOME/.asdf/asdf.sh
          make publish

      - name: Run unit tests with coverage threshold
        run: |
          cd $GITHUB_WORKSPACE/caylent-devcontainer-cli
          source $HOME/.asdf/asdf.sh
          make unit-test
          coverage json
          coverage_percent=$(python -c "import json; f=open('coverage.json'); print(json.load(f)['totals']['percent_covered'])")
          echo "Coverage: $coverage_percent%"
          if (( $(echo "$coverage_percent < 90" | bc -l) )); then
            echo "Error: Code coverage is below 90% threshold ($coverage_percent%)"
            exit 1
          fi

      - name: Run functional tests
        run: |
          cd $GITHUB_WORKSPACE/caylent-devcontainer-cli
          source $HOME/.asdf/asdf.sh
          make functional-test

      - name: Generate coverage report
        run: |
          cd $GITHUB_WORKSPACE/caylent-devcontainer-cli
          source $HOME/.asdf/asdf.sh
          make coverage
          make coverage-json

      - name: Print coverage summary
        run: |
          cd $GITHUB_WORKSPACE/caylent-devcontainer-cli
          source $HOME/.asdf/asdf.sh
          make coverage-text

      - name: Find code owners
        id: codeowners
        if: success()
        run: |
          DEFAULT_OWNER=""
          if [ -f ".github/CODEOWNERS" ]; then
            DEFAULT_OWNER=$(grep -E "^\*" .github/CODEOWNERS | awk '{print $2}')
          fi

          CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }} ${{ github.event.pull_request.head.sha }})
          echo "Changed files: $CHANGED_FILES"

          SPECIFIC_OWNERS=""
          if [ -f ".github/CODEOWNERS" ]; then
            for FILE in $CHANGED_FILES; do
              while [[ "$FILE" == */* ]]; do
                DIR=$(dirname "$FILE")
                MATCH=$(grep -E "^$DIR/" .github/CODEOWNERS | awk '{for(i=2;i<=NF;i++) print $i}')
                if [ -n "$MATCH" ]; then
                  SPECIFIC_OWNERS="$SPECIFIC_OWNERS $MATCH"
                  break
                fi
                FILE="$DIR"
              done
            done
          fi

          if [ -z "$SPECIFIC_OWNERS" ]; then
            OWNERS="$DEFAULT_OWNER"
          else
            OWNERS="$SPECIFIC_OWNERS"
          fi

          UNIQUE_OWNERS=$(echo "$OWNERS" | tr ' ' '\n' | grep -v '^$' | sort -u | tr '\n' ' ' | xargs)
          echo "Final owners: $UNIQUE_OWNERS"
          echo "owners=$UNIQUE_OWNERS" >> $GITHUB_OUTPUT

      - name: Send PR review request to Slack
        if: success()
        uses: slackapi/slack-github-action@v1.25.0
        with:
          payload: |
            {
              "text": "<!here> :mag: PR Ready for Review",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "<!here> *PR Review Needed*"
                  }
                },
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": ":mag: PR Ready for Review"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*PR #${{ github.event.pull_request.number }}*: ${{ github.event.pull_request.title }}\nAll validation checks have passed! This PR is ready for review.\n<${{ github.event.pull_request.html_url }}|View Pull Request>"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Author:* ${{ github.event.pull_request.user.login }}\n*Code Owners:* ${{ steps.codeowners.outputs.owners }}"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
