name: Main Branch Validation

on:
  push:
    branches:
      - main

jobs:
  validate:
    name: Validate Main
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install system dependencies for Python build
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libssl-dev zlib1g-dev
          sudo apt-get install -y libbz2-dev libreadline-dev libsqlite3-dev curl
          sudo apt-get install -y libncursesw5-dev xz-utils tk-dev libxml2-dev
          sudo apt-get install -y libxmlsec1-dev libffi-dev liblzma-dev bc twine

      - name: Install ASDF
        uses: asdf-vm/actions/setup@v3

      - name: Install ASDF plugins and tools
        run: |
          cd $GITHUB_WORKSPACE
          cat .tool-versions | cut -d' ' -f1 | xargs -I{} asdf plugin add {} || true
          asdf install
          asdf reshim

      - name: Install CLI
        run: |
          cd $GITHUB_WORKSPACE/caylent-devcontainer-cli
          make install

      - name: Lint
        run: |
          cd $GITHUB_WORKSPACE/caylent-devcontainer-cli
          make lint

      - name: Build
        run: |
          cd $GITHUB_WORKSPACE/caylent-devcontainer-cli
          make publish

      - name: Run unit tests with coverage threshold
        run: |
          cd $GITHUB_WORKSPACE/caylent-devcontainer-cli
          make unit-test
          # Generate JSON coverage report first
          coverage json
          coverage_percent=$(python -c "import json; f=open('coverage.json'); print(json.load(f)['totals']['percent_covered'])")
          echo "Coverage: $coverage_percent%"
          if (( $(echo "$coverage_percent < 85" | bc -l) )); then
            echo "Error: Code coverage is below 85% threshold ($coverage_percent%)"
            exit 1
          fi

      - name: Run functional tests
        run: |
          cd $GITHUB_WORKSPACE/caylent-devcontainer-cli
          make functional-test

      - name: Generate coverage report
        run: |
          cd $GITHUB_WORKSPACE/caylent-devcontainer-cli
          make coverage
          make coverage-json

      - name: Print coverage summary
        run: |
          cd $GITHUB_WORKSPACE/caylent-devcontainer-cli
          make coverage-text

      - name: Send success notification to Slack
        if: success()
        uses: slackapi/slack-github-action@v1.25.0
        with:
          payload: |
            {
              "text": "<!here> ✅ Main Branch Validation Successful",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "<!here> *QA Testing Needed*"
                  }
                },
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "✅ Main Branch Validation Successful"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "The main branch validation workflow completed successfully.\n\n<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View the workflow run>\n\nPlease perform manual QA testing and approve the release when ready."
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

      - name: Send failure notification to Slack
        if: failure()
        uses: slackapi/slack-github-action@v1.25.0
        with:
          payload: |
            {
              "text": "<!here> ❌ Main Branch Validation Failed",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "<!here> *Action Required: Build Failed*"
                  }
                },
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "❌ Main Branch Validation Failed"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "The main branch validation workflow failed.\n\n<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View the failure details>\n\nPlease fix the issues and try again."
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-24.04
    permissions:
      security-events: write
      actions: read
      contents: read

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: python

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:python"

  manual-approval:
    name: Manual QA Approval
    needs: [validate, codeql]
    runs-on: ubuntu-latest
    environment:
      name: qa-approval
      url: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

    steps:
      - name: QA Approval
        run: echo "QA has been approved"

  create-release:
    name: Create Release
    needs: manual-approval
    runs-on: ubuntu-24.04
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install system dependencies for Python build
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libssl-dev zlib1g-dev
          sudo apt-get install -y libbz2-dev libreadline-dev libsqlite3-dev curl
          sudo apt-get install -y libncursesw5-dev xz-utils tk-dev libxml2-dev
          sudo apt-get install -y libxmlsec1-dev libffi-dev liblzma-dev bc twine

      - name: Install ASDF
        uses: asdf-vm/actions/setup@v3

      - name: Install ASDF plugins and tools
        run: |
          cd $GITHUB_WORKSPACE
          cat .tool-versions | cut -d' ' -f1 | xargs -I{} asdf plugin add {} || true
          asdf install
          asdf reshim

      - name: Install CLI and dependencies
        run: |
          cd $GITHUB_WORKSPACE/caylent-devcontainer-cli
          make install
      - name: Create CHANGELOG if needed
        run: |
          cd $GITHUB_WORKSPACE/caylent-devcontainer-cli
          if [ ! -f CHANGELOG.md ]; then
            echo "# Changelog" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "All notable changes to this project will be documented in this file." >> CHANGELOG.md
          fi

      - name: Determine version bump
        id: semantic-release
        run: |
          cd $GITHUB_WORKSPACE/caylent-devcontainer-cli
          python -m semantic_release version --no-commit
          NEW_VERSION=$(python -m semantic_release version --print)
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Create tag
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git tag -a ${{ steps.semantic-release.outputs.new_version }} -m "Release ${{ steps.semantic-release.outputs.new_version }}"
          git push origin ${{ steps.semantic-release.outputs.new_version }}
