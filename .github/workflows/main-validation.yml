name: Main Branch Validation

on:
  push:
    branches:
      - main

jobs:
  validate:
    # Only run the validate job when the actor is NOT the bot
    # This ensures the workflow runs for regular pushes but skips for bot-generated changelog commits
    if: ${{ github.actor != 'caylent-platform-bot[bot]' }}
    name: Validate Main
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install system dependencies for Python build
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libssl-dev zlib1g-dev
          sudo apt-get install -y libbz2-dev libreadline-dev libsqlite3-dev curl
          sudo apt-get install -y libncursesw5-dev xz-utils tk-dev libxml2-dev
          sudo apt-get install -y libxmlsec1-dev libffi-dev liblzma-dev bc

      - name: Install ASDF
        uses: asdf-vm/actions/setup@v3

      - name: Install ASDF plugins and tools
        run: |
          cd $GITHUB_WORKSPACE
          cat .tool-versions | cut -d' ' -f1 | xargs -I{} asdf plugin add {} || true
          asdf install
          asdf reshim

      - name: Install CLI
        run: |
          cd $GITHUB_WORKSPACE/caylent-devcontainer-cli
          make install
          asdf reshim

      - name: Lint
        run: |
          cd $GITHUB_WORKSPACE/caylent-devcontainer-cli
          make lint

      - name: Build
        run: |
          cd $GITHUB_WORKSPACE/caylent-devcontainer-cli
          make publish

      - name: Run unit tests with coverage threshold
        run: |
          cd $GITHUB_WORKSPACE/caylent-devcontainer-cli
          make unit-test
          coverage json
          coverage_percent=$(python -c "import json; f=open('coverage.json'); print(json.load(f)['totals']['percent_covered'])")
          echo "Coverage: $coverage_percent%"
          if (( $(echo "$coverage_percent < 85" | bc -l) )); then
            echo "Error: Code coverage is below 85% threshold ($coverage_percent%)"
            exit 1
          fi

      - name: Run functional tests
        run: |
          cd $GITHUB_WORKSPACE/caylent-devcontainer-cli
          make functional-test

      - name: Generate coverage report
        run: |
          cd $GITHUB_WORKSPACE/caylent-devcontainer-cli
          make coverage
          make coverage-json

      - name: Print coverage summary
        run: |
          cd $GITHUB_WORKSPACE/caylent-devcontainer-cli
          make coverage-text

      - name: Send success notification to Slack
        if: success()
        uses: slackapi/slack-github-action@v1.25.0
        with:
          payload: |
            {
              "text": "<!here> ✅ Main Branch Validation Successful",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "<!here> *QA Testing Needed*"
                  }
                },
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "✅ Main Branch Validation Successful"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "The main branch validation workflow completed successfully.\n\n<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View the workflow run>\n\nPlease perform manual QA testing and approve the release when ready."
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

      - name: Send failure notification to Slack
        if: failure()
        uses: slackapi/slack-github-action@v1.25.0
        with:
          payload: |
            {
              "text": "<!here> ❌ Main Branch Validation Failed",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "<!here> *Action Required: Build Failed*"
                  }
                },
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "❌ Main Branch Validation Failed"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "The main branch validation workflow failed.\n\n<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View the failure details>\n\nPlease fix the issues and try again."
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-24.04
    permissions:
      security-events: write
      actions: read
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:python"

  manual-approval:
    if: ${{ github.actor != 'caylent-platform-bot[bot]' }}
    name: Manual QA Approval
    needs: [validate]
    runs-on: ubuntu-latest
    environment:
      name: qa-approval
      url: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

    steps:
      - name: QA Approval
        run: echo "QA has been approved"

  create-release:
    if: ${{ github.actor != 'caylent-platform-bot[bot]' }}
    name: Create Release
    needs: manual-approval
    runs-on: ubuntu-24.04
    permissions:
      contents: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate token from GitHub App
        id: generate_token
        uses: tibdex/github-app-token@v2
        with:
          app_id: ${{ secrets.GH_APP_ID }}
          private_key: ${{ secrets.GH_APP_PRIVATE_KEY }}
          repositories: >-
            ["${{ github.repository }}"]

      - name: Install system dependencies for Python build
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libssl-dev zlib1g-dev
          sudo apt-get install -y libbz2-dev libreadline-dev libsqlite3-dev curl
          sudo apt-get install -y libncursesw5-dev xz-utils tk-dev libxml2-dev
          sudo apt-get install -y libxmlsec1-dev libffi-dev liblzma-dev bc jq

      - name: Install ASDF
        uses: asdf-vm/actions/setup@v3

      - name: Install ASDF plugins and tools
        run: |
          cd $GITHUB_WORKSPACE
          cat .tool-versions | cut -d' ' -f1 | xargs -I{} asdf plugin add {} || true
          asdf install
          asdf reshim

      - name: Install CLI and dependencies
        working-directory: ${{ github.workspace }}/caylent-devcontainer-cli
        run: |
          pip install --upgrade pip
          make install
          asdf reshim

      - name: Bump version and update changelog
        id: semantic-release
        working-directory: ${{ github.workspace }}/caylent-devcontainer-cli
        env:
          GH_TOKEN: ${{ steps.generate_token.outputs.token }}
        run: |
          # Save existing changelog if it exists
          if [ -f "CHANGELOG.md" ]; then
            cp CHANGELOG.md CHANGELOG.md.bak
          fi
          
          # Run semantic-release to determine version based on commits
          # Use --no-vcs-release to prevent automatic git operations
          python -m semantic_release version --no-vcs-release
          
          # Get the version without 'v' prefix
          NEW_VERSION=$(python -m semantic_release version --print | sed 's/^v//')
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          
          # Handle changelog properly - append instead of overwrite
          if [ -f "CHANGELOG.md.bak" ]; then
            # Extract new content (excluding the header) from generated changelog
            python -m semantic_release changelog > temp_changelog.md
            
            # Get the header from the original changelog
            head -n 10 CHANGELOG.md.bak > CHANGELOG.md
            
            # Add the new version section from temp changelog
            sed -n "/^## ${NEW_VERSION}/,/^## /p" temp_changelog.md | sed '$d' >> CHANGELOG.md
            
            # Add the rest of the original changelog (skipping header)
            tail -n +11 CHANGELOG.md.bak >> CHANGELOG.md
            
            # Clean up
            rm CHANGELOG.md.bak temp_changelog.md
          else
            # If no changelog exists, create it but remove the 'v' prefix from versions
            python -m semantic_release changelog > temp_changelog.md
            sed 's/## v/## /g' temp_changelog.md > CHANGELOG.md
            rm temp_changelog.md
          fi

      - name: Commit changelog and version bump
        working-directory: ${{ github.workspace }}/caylent-devcontainer-cli
        env:
          GH_TOKEN: ${{ steps.generate_token.outputs.token }}
        run: |
          git config --global user.name "caylent-platform-bot[bot]"
          git config --global user.email "caylent-platform-bot[bot]@users.noreply.github.com"
          git remote set-url origin https://x-access-token:${GH_TOKEN}@github.com/${{ github.repository }}
          
          # Create a temporary branch for the changelog update
          TEMP_BRANCH="changelog-update-${{ steps.semantic-release.outputs.new_version }}"
          git checkout -b $TEMP_BRANCH
          
          # Add and commit changes
          git add CHANGELOG.md src/caylent_devcontainer_cli/__init__.py
          git commit -m "chore(release): ${{ steps.semantic-release.outputs.new_version }}"
          git push origin $TEMP_BRANCH
          
          # Create PR using GitHub API
          PR_RESPONSE=$(curl -s -X POST \
            -H "Authorization: token ${GH_TOKEN}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/pulls \
            -d '{
              "title": "chore(release): '"${{ steps.semantic-release.outputs.new_version }}"'",
              "head": "'"$TEMP_BRANCH"'",
              "base": "main",
              "body": "Automated changelog update for version '"${{ steps.semantic-release.outputs.new_version }}"'"
            }')
            
          # Extract PR number
          PR_NUMBER=$(echo "$PR_RESPONSE" | jq -r .number)
          echo "Created PR #$PR_NUMBER"
          
          # Merge the PR with admin privileges
          curl -s -X PUT \
            -H "Authorization: token ${GH_TOKEN}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER/merge" \
            -d '{
              "merge_method": "merge",
              "commit_title": "chore(release): '"${{ steps.semantic-release.outputs.new_version }}"'",
              "commit_message": "Update changelog for version '"${{ steps.semantic-release.outputs.new_version }}"'"
            }'

      - name: Create Git tag
        env:
          GH_TOKEN: ${{ steps.generate_token.outputs.token }}
        run: |
          # Wait until the merged PR is reflected in origin/main
          until git fetch origin main && git checkout main && git pull origin main; do
            echo "Waiting for main branch update..."
            sleep 5
          done
          
          # Create tag without 'v' prefix
          git tag -a ${{ steps.semantic-release.outputs.new_version }} -m "Release ${{ steps.semantic-release.outputs.new_version }}"
          git push origin ${{ steps.semantic-release.outputs.new_version }}
