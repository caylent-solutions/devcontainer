name: Main Branch Validation

on:
  push:
    branches:
      - main

jobs:
  validate:
    name: Validate Main
    if: ${{ github.actor != 'caylent-platform-bot[bot]' }}
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Cache system dependencies
        id: cache-system-deps
        uses: actions/cache@v4
        with:
          path: /tmp/apt-cache
          key: system-deps-${{ runner.os }}-${{ runner.arch }}-v3

      - name: Install system dependencies for Python build
        run: |
          # Configure apt to use our cache directory
          sudo mkdir -p /tmp/apt-cache
          echo 'Dir::Cache::Archives "/tmp/apt-cache";' | sudo tee /etc/apt/apt.conf.d/99cache

          # Check if we have a cache hit by looking for cached files
          if [ -d /tmp/apt-cache ] && [ "$(ls -A /tmp/apt-cache)" ]; then
            echo "Cache hit detected - restoring packages from cache"
            sudo dpkg -i /tmp/apt-cache/*.deb || true
            sudo apt-get install -f -y  # Fix any broken dependencies
          else
            echo "No cache found - downloading packages"
            sudo apt-get update
            sudo apt-get install -y build-essential libssl-dev zlib1g-dev \
              libbz2-dev libreadline-dev libsqlite3-dev curl \
              libncursesw5-dev xz-utils tk-dev libxml2-dev \
              libxmlsec1-dev libffi-dev liblzma-dev bc
          fi

      - name: Fix cache permissions
        if: always()
        run: |
          # Fix permissions on cache directories with appropriate security
          sudo find /tmp/apt-cache -type d -exec chmod 755 {} + 2>/dev/null || true
          sudo find /tmp/apt-cache -type f -exec chmod 644 {} + 2>/dev/null || true
          sudo chown -R $USER:$USER /tmp/apt-cache 2>/dev/null || true

      - name: Cache ASDF installation
        uses: actions/cache@v4
        with:
          path: ~/.asdf
          key: ${{ runner.os }}-asdf-v0.15.0-${{ hashFiles('.tool-versions') }}
          restore-keys: |
            ${{ runner.os }}-asdf-v0.15.0-

      - name: Install ASDF
        run: |
          if [ ! -d ~/.asdf ]; then
            git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.15.0
          fi
          echo "$HOME/.asdf/bin" >> $GITHUB_PATH
          echo "$HOME/.asdf/shims" >> $GITHUB_PATH
          source $HOME/.asdf/asdf.sh

      - name: Install ASDF plugins and tools
        run: |
          cd $GITHUB_WORKSPACE
          source $HOME/.asdf/asdf.sh
          cut -d' ' -f1 .tool-versions | xargs -I{} asdf plugin add {} || true
          asdf install
          asdf reshim

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.local/lib/python*/site-packages
          key: ${{ runner.os }}-pip-${{ hashFiles('caylent-devcontainer-cli/requirements.txt', 'caylent-devcontainer-cli/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install CLI
        run: |
          cd $GITHUB_WORKSPACE/caylent-devcontainer-cli
          source $HOME/.asdf/asdf.sh
          make install
          asdf reshim

      - name: Run pre-commit checks
        run: |
          cd $GITHUB_WORKSPACE
          make pre-commit-check

      - name: Lint
        run: |
          cd $GITHUB_WORKSPACE/caylent-devcontainer-cli
          source $HOME/.asdf/asdf.sh
          make lint

      - name: Build
        run: |
          cd $GITHUB_WORKSPACE/caylent-devcontainer-cli
          source $HOME/.asdf/asdf.sh
          make publish

      - name: Run unit tests with coverage threshold
        run: |
          cd $GITHUB_WORKSPACE/caylent-devcontainer-cli
          source $HOME/.asdf/asdf.sh
          make unit-test
          coverage json
          coverage_percent=$(python -c "import json; f=open('coverage.json'); print(json.load(f)['totals']['percent_covered'])")
          echo "Coverage: $coverage_percent%"
          if (( $(echo "$coverage_percent < 90" | bc -l) )); then
            echo "Error: Code coverage is below 90% threshold ($coverage_percent%)"
            exit 1
          fi

      - name: Run functional tests
        run: |
          cd $GITHUB_WORKSPACE/caylent-devcontainer-cli
          source $HOME/.asdf/asdf.sh
          make functional-test

      - name: Generate coverage report
        run: |
          cd $GITHUB_WORKSPACE/caylent-devcontainer-cli
          source $HOME/.asdf/asdf.sh
          make coverage
          make coverage-json

      - name: Print coverage summary
        run: |
          cd $GITHUB_WORKSPACE/caylent-devcontainer-cli
          source $HOME/.asdf/asdf.sh
          make coverage-text

      - name: Send success notification to Slack
        if: success()
        uses: slackapi/slack-github-action@v1.25.0
        with:
          payload: |
            {
              "text": "<!here> ✅ Main Branch Validation Successful",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "<!here> *QA Testing Needed*"
                  }
                },
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "✅ Main Branch Validation Successful"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "The main branch validation workflow completed successfully.\n\n<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View the workflow run>\n\nPlease perform manual QA testing and approve the release when ready."
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

      - name: Send failure notification to Slack
        if: failure()
        uses: slackapi/slack-github-action@v1.25.0
        with:
          payload: |
            {
              "text": "<!here> ❌ Main Branch Validation Failed",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "<!here> *Action Required: Build Failed*"
                  }
                },
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "❌ Main Branch Validation Failed"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "The main branch validation workflow failed.\n\n<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View the failure details>\n\nPlease fix the issues and try again."
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

  codeql:
    name: CodeQL Analysis
    if: ${{ github.actor != 'caylent-platform-bot[bot]' }}
    runs-on: ubuntu-24.04
    permissions:
      security-events: write
      actions: read
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:python"

  manual-approval:
    name: Manual QA Approval
    if: ${{ github.actor != 'caylent-platform-bot[bot]' }}
    needs: [validate, codeql]
    runs-on: ubuntu-24.04
    environment:
      name: qa-approval
      url: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

    steps:
      - name: QA Approval
        run: echo "QA has been approved"

  create-release:
    name: Create Release
    needs: [manual-approval]
    runs-on: ubuntu-24.04
    permissions:
      contents: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate token from GitHub App
        id: generate_token
        uses: tibdex/github-app-token@v2
        with:
          app_id: ${{ secrets.GH_APP_ID }}
          private_key: ${{ secrets.GH_APP_PRIVATE_KEY }}

      - name: Cache system dependencies for release
        id: cache-system-deps-release
        uses: actions/cache@v4
        with:
          path: /tmp/apt-cache-release
          key: system-deps-release-${{ runner.os }}-${{ runner.arch }}-v3

      - name: Install system dependencies
        run: |
          # Configure apt to use our cache directory
          sudo mkdir -p /tmp/apt-cache-release
          echo 'Dir::Cache::Archives "/tmp/apt-cache-release";' | sudo tee /etc/apt/apt.conf.d/99cache

          # Check if we have a cache hit by looking for cached files
          if [ -d /tmp/apt-cache-release ] && [ "$(ls -A /tmp/apt-cache-release)" ]; then
            echo "Cache hit detected - restoring packages from cache"
            sudo dpkg -i /tmp/apt-cache-release/*.deb || true
            sudo apt-get install -f -y  # Fix any broken dependencies
          else
            echo "No cache found - downloading packages"
            sudo apt-get update
            sudo apt-get install -y build-essential libssl-dev zlib1g-dev \
              libbz2-dev libreadline-dev libsqlite3-dev curl libncursesw5-dev \
              xz-utils tk-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev bc gh
          fi

      - name: Fix release cache permissions
        if: always()
        run: |
          # Fix permissions on release cache directories with appropriate security
          sudo find /tmp/apt-cache-release -type d -exec chmod 755 {} + 2>/dev/null || true
          sudo find /tmp/apt-cache-release -type f -exec chmod 644 {} + 2>/dev/null || true
          sudo chown -R $USER:$USER /tmp/apt-cache-release 2>/dev/null || true

      - name: Cache ASDF installation for release
        uses: actions/cache@v4
        with:
          path: ~/.asdf
          key: ${{ runner.os }}-asdf-release-v0.15.0-${{ hashFiles('.tool-versions') }}
          restore-keys: |
            ${{ runner.os }}-asdf-release-v0.15.0-
            ${{ runner.os }}-asdf-v0.15.0-

      - name: Install ASDF
        run: |
          if [ ! -d ~/.asdf ]; then
            git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.15.0
          fi
          echo "$HOME/.asdf/bin" >> $GITHUB_PATH
          echo "$HOME/.asdf/shims" >> $GITHUB_PATH
          source $HOME/.asdf/asdf.sh

      - name: Install ASDF plugins and tools
        run: |
          cd $GITHUB_WORKSPACE
          source $HOME/.asdf/asdf.sh
          cut -d' ' -f1 .tool-versions | xargs -I{} asdf plugin add {} || true
          asdf install
          asdf reshim

      - name: Cache Python dependencies for release
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.local/lib/python*/site-packages
          key: ${{ runner.os }}-pip-release-${{ hashFiles('caylent-devcontainer-cli/requirements.txt', 'caylent-devcontainer-cli/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-release-
            ${{ runner.os }}-pip-

      - name: Install CLI and dependencies
        working-directory: ${{ github.workspace }}/caylent-devcontainer-cli
        run: |
          source $HOME/.asdf/asdf.sh
          pip install --upgrade pip
          make install
          asdf reshim

      - name: Compute next version
        id: semantic-release
        working-directory: ${{ github.workspace }}/caylent-devcontainer-cli
        env:
          GH_TOKEN: ${{ steps.generate_token.outputs.token }}
        run: |
          NEW_VERSION=$(python -m semantic_release version --print | sed 's/^v//')
          echo "New version: $NEW_VERSION"
          # Ensure we have a non-empty version
          if [[ -z "$NEW_VERSION" ]]; then
            echo "No new version detected, using current version"
            NEW_VERSION=$(python -c "import importlib.metadata; print(importlib.metadata.version('caylent-devcontainer-cli'))")
            echo "Current version: $NEW_VERSION"
          fi
          echo "version=$NEW_VERSION" >> "$GITHUB_OUTPUT"

      - name: Generate changelog and update version files
        working-directory: ${{ github.workspace }}/caylent-devcontainer-cli
        env:
          GH_TOKEN: ${{ steps.generate_token.outputs.token }}
        run: |
          # Use semantic-release to update pyproject.toml and CHANGELOG.md
          # The --no-commit flag updates files without committing
          python -m semantic_release version --no-push --no-vcs-release --no-commit

          # Get the version that was just set in pyproject.toml
          NEW_VERSION=$(grep 'version = ' pyproject.toml | sed 's/.*version = "\([^"]*\)".*/\1/')
          echo "Updated version: $NEW_VERSION"

          # Manually update __init__.py (semantic-release isn't updating it properly)
          echo "import re; content = open('src/caylent_devcontainer_cli/__init__.py').read(); content = re.sub(r'__version__ = \"[^\"]*\"', '__version__ = \"$NEW_VERSION\"', content); open('src/caylent_devcontainer_cli/__init__.py', 'w').write(content)" > update_version.py
          python3 update_version.py
          rm update_version.py

          echo "Updated all three files to version $NEW_VERSION"

          # Clean up build artifacts created by semantic-release
          rm -rf dist/ build/ src/caylent_devcontainer_cli.egg-info/

      - name: Commit changelog and version bump
        id: commit-changes
        working-directory: ${{ github.workspace }}/caylent-devcontainer-cli
        env:
          GH_TOKEN: ${{ steps.generate_token.outputs.token }}
        run: |
          # Get the version that was updated in the previous step
          VERSION=$(grep 'version = ' pyproject.toml | sed 's/.*version = "\([^"]*\)".*/\1/')
          echo "VERSION: $VERSION"

          if [[ -z "$VERSION" ]]; then
            echo "ERROR: version is empty. Exiting."
            exit 1
          fi

          git config --global user.name "caylent-platform-bot[bot]"
          git config --global user.email "caylent-platform-bot[bot]@users.noreply.github.com"
          git remote set-url origin https://x-access-token:${GH_TOKEN}@github.com/${{ github.repository }}
          git checkout -b release-$VERSION
          # Add ALL version-related files that semantic-release may have updated
          git add CHANGELOG.md src/caylent_devcontainer_cli/__init__.py pyproject.toml
          git commit -m "chore(release): $VERSION"
          git push origin release-$VERSION

          PR_URL=$(gh pr create \
            --title "Release $VERSION" \
            --body "Automated release PR for version $VERSION" \
            --base main \
            --head release-$VERSION)

          echo "pr_url=${PR_URL}" >> "$GITHUB_OUTPUT"
          gh pr merge ${PR_URL} --admin --merge

      - name: Wait for PR to merge and create Git tag
        env:
          GH_TOKEN: ${{ steps.generate_token.outputs.token }}
        run: |
          set -euo pipefail

          PR_URL="${{ steps.commit-changes.outputs.pr_url }}"
          PR_NUMBER=$(echo "$PR_URL" | grep -o '[0-9]\+$')
          # Get the version from pyproject.toml since we're not using the semantic-release step output anymore
          NEW_VERSION=$(grep 'version = ' caylent-devcontainer-cli/pyproject.toml | sed 's/.*version = "\([^"]*\)".*/\1/')

          echo "Waiting for PR #$PR_NUMBER to be merged..."

          MAX_ATTEMPTS=10
          ATTEMPT=1
          DELAY=3

          while [ "$ATTEMPT" -le "$MAX_ATTEMPTS" ]; do
            MERGED_AT=$(gh pr view "$PR_NUMBER" --json mergedAt -q '.mergedAt' || echo "")
            if [[ -n "$MERGED_AT" && "$MERGED_AT" != "null" ]]; then
              echo "✅ PR #$PR_NUMBER merged at $MERGED_AT"
              break
            fi

            echo "⏳ Attempt $ATTEMPT/$MAX_ATTEMPTS: PR not merged yet, retrying in $DELAY seconds..."
            sleep "$DELAY"
            ATTEMPT=$((ATTEMPT + 1))
            DELAY=$((DELAY * 2))
          done

          if [ "$ATTEMPT" -gt "$MAX_ATTEMPTS" ]; then
            echo "⚠️ Timed out waiting for PR to merge, continuing anyway."
          fi

          git fetch --all
          git checkout main
          git pull origin main
          git tag -a "$NEW_VERSION" -m "Release $NEW_VERSION"
          git push origin "$NEW_VERSION"
